AMD和CommonJS 区别：
 
define(function() {
  var exports = {}; exports.sayHello = function() {
   alert('Hello from module: ' + module.id); };
   return exports; 
});
1、AMD要用define定义一个模块
2、内容需要返回来实现导出

CMD（和AMD的区别参考玉伯的解释https://www.zhihu.com/question/20351507）
define(['dep1', 'dep2'], function (dep1, dep2) { return function () {};
});
与AMD相比，CMD更接近于Node对CommonJS规范，CMD需要在require引入
 define(function(require, exports, module) {
  require('')
 }); 
 
 
  UMD 通用模块定义规范（Universal Module Definition）兼容多种模块规范  
  严格上说，umd不能算是一种模块规范，因为它没有模块定义和调用，这是AMD和CommonJS（服务端模块化规范)的结合体，保证模块可以被amd和commonjs调用
 (function (name, definition) {
  // 检测上 文环境是否为AMD CMD
  var hasDefine = typeof define === 'function',
  // 检查上 文环境是否为Node
  hasExports = typeof module !== 'undefined' && module.exports;
  if (hasDefine) {
     define(definition);// AMD环境 CMD环境
  } else if (hasExports) {
     module.exports = definition();// 定义为 通Node模块
  } else {
     this[name] = definition(); // 将模块的执行结  在window 量中 在  器中this  window对象
  }
})('hello', function () {
  var hello = function () {};
  return hello; 
});
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['b'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory(require('b'));
    } else {
        // Browser globals (root is window)
        root.returnExports = factory(root.b);
    }
}(this, function (b) {
    //use b in some fashion.

    // Just return a value to define the module export.
    // This example returns an object, but the module
    // can return a function as the exported value.
    return {}
}));
